# Stubs for praw.models.reddit.redditor (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from mypy_extensions import TypedDict
from typing import Optional, List

from ...const import API_PATH
from ...reddit import Reddit
from ..listing.mixins import RedditorListingMixin
from ..listing.mixins.redditor import SubListing
from ..util import stream_generator
from ..trophy import Trophy
from .base import RedditBase
from .mixins import MessageableMixin
from .multi import Multireddit
from typing import Any, Optional

_RedditorSubredditDict = TypedDict(
    "_RedditorSubredditDict",
    {
        "banner_img": str,
        "name": str,
        "over_18": bool,
        "public_description": str,
        "subscribers": int,
        "title": str,
    },
)

class Redditor(RedditBase, MessageableMixin, RedditorListingMixin):
    STR_FIELD: str = ...
    @classmethod
    def from_data(cls, reddit: Reddit, data: str) -> Optional[Redditor]: ...
    @property
    def stream(self) -> RedditorStream: ...
    def __init__(
        self, reddit: Reddit, name: Optional[str] = ..., _data: Optional[object] = ...
    ) -> None: ...
    def block(self) -> None: ...
    def friend(self, note: Optional[Any] = ...) -> None: ...
    def friend_info(self) -> Redditor: ...
    def gild(self, months: int = ...) -> None: ...
    def multireddits(self) -> List[Multireddit]: ...
    def trophies(self) -> List[Trophy]: ...
    def unblock(self) -> None: ...
    def unfriend(self) -> None: ...
    # Static attributes
    name: str = ...

    # Dynamically generated attributes
    comment_karma: int = ...
    comments: SubListing = ...
    created_utc: float = ...
    has_verified_email: bool = ...
    icon_img: str = ...
    id: str = ...
    is_employee: bool = ...
    is_friend: bool = ...
    is_gold: bool = ...
    link_karma: int = ...
    subreddit: _RedditorSubredditDict = ...

class RedditorStream:
    def __init__(self, redditor: Redditor) -> None: ...
    def comments(self, **stream_options: Any): ...
    def submissions(self, **stream_options: Any): ...
    redditor: Redditor = ...
