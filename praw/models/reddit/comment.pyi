from ...exceptions import ClientException
from ...reddit import Reddit
from ..comment_forest import CommentForest
from .base import RedditBase
from .mixins import InboxableMixin, ThingModerationMixin, UserContentMixin
from .redditor import Redditor
from .subreddit import Subreddit
from .submission import Submission
from typing import Optional, Dict, Union, List, Tuple

class Comment(RedditBase, InboxableMixin, UserContentMixin):
    MISSING_COMMENT_MESSAGE: str = ...
    STR_FIELD: str = ...
    @staticmethod
    def id_from_url(url: str) -> str: ...
    @property
    def is_root(self) -> bool: ...
    @property
    def mod(self) -> CommentModeration: ...
    @property
    def replies(self) -> CommentForest: ...
    @property
    def submission(self) -> Submission: ...
    @submission.setter
    def submission(self, submission: Submission) -> None: ...
    id: str = ...

    # Dynamically generated attributes
    author: Redditor = ...
    body: str = ...
    created_utc: float = ...
    distinguished: Optional[float] = ...
    edited: Optional[float] = ...
    is_submitter: bool = ...
    link_id: str = ...
    parent_id: str = ...
    permalink: str = ...
    score: int = ...
    subreddit: Subreddit = ...
    subreddit_id: str = ...

    # Discovered attributes not mentioned directly in comments

    # Note 1: Both mod_reports and user_reports actually are list-of-lists.
    # However, the inner list is more semantically closer to a tuple -- so we use that
    # so we can get more precise types.
    #
    # Note 2: If the report reason is 'None', that means no report reason
    # was selected.
    mod_reports: List[Tuple[Optional[str], str]] = ...
    user_reports: List[Tuple[Optional[str], int]] = ...
    def __init__(
        self,
        reddit: Reddit,
        id: Optional[str] = ...,
        url: Optional[str] = ...,
        _data: Optional[Dict[str, object]] = ...,
    ) -> None: ...
    def parent(self) -> Union[Comment, Submission]: ...
    def refresh(self) -> Comment: ...

class CommentModeration(ThingModerationMixin):
    thing: Comment = ...
    def __init__(self, comment: Comment) -> None: ...
