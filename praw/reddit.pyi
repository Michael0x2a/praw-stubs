# Stubs for praw.reddit (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .config import Config
from .const import API_PATH, USER_AGENT_FORMAT, __version__, configparser
from .exceptions import ClientException
from .objector import Objector
from .models import SubredditHelper
from typing import Any, Dict, Optional

UPDATE_CHECKER_MISSING: bool

class Reddit:
    update_checked: bool = ...
    @property
    def read_only(self) -> bool: ...
    @read_only.setter
    def read_only(self, value: bool) -> None: ...
    def __enter__(self) -> Reddit: ...
    def __exit__(self, *_args: Any) -> None: ...
    config: Any = ...
    auth: Any = ...
    front: Any = ...
    inbox: Any = ...
    live: Any = ...
    multireddit: Any = ...
    subreddit: SubredditHelper = ...
    subreddits: Any = ...
    user: Any = ...
    def __init__(self,
                 site_name: Optional[str] = ...,
                 requestor_class: Optional[Any] = ...,
                 requestor_kwargs: Optional[Dict[str, Any]] = ...,
                 client_id: Optional[str] = ...,
                 client_secret: Optional[str] = ...,
                 oauth_url: Optional[str] = ...,
                 reddit_url: Optional[str] = ...,
                 refresh_token: Optional[str] = ...,
                 redirect_uri: Optional[str] = ...,
                 password: Optional[str] = ...,
                 user_agent: Optional[str] = ...,
                 username: Optional[str] = ...,
                 ) -> None: ...
    def comment(self, id: Optional[Any] = ..., url: Optional[Any] = ...): ...
    def domain(self, domain: Any): ...
    def get(self, path: Any, params: Optional[Any] = ...): ...
    def info(self, fullnames: Optional[Any] = ..., url: Optional[Any] = ...): ...
    def patch(self, path: Any, data: Optional[Any] = ...): ...
    def post(self, path: Any, data: Optional[Any] = ..., files: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def random_subreddit(self, nsfw: bool = ...): ...
    def redditor(self, name: Any): ...
    def request(self, method: Any, path: Any, params: Optional[Any] = ..., data: Optional[Any] = ..., files: Optional[Any] = ...): ...
    def submission(self, id: Optional[Any] = ..., url: Optional[Any] = ...): ...
