# Stubs for praw.reddit (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, Optional, List, Iterator, Union

from .config import Config
from .const import API_PATH, USER_AGENT_FORMAT, __version__, configparser
from .exceptions import ClientException
from .objector import Objector
from .models.reddit.base import RedditBase
from .models import (
    SubredditHelper,
    Auth,
    Front,
    Inbox,
    LiveHelper,
    MultiredditHelper,
    Subreddits,
    User,
    Comment,
    DomainListing,
    Subreddit,
    Redditor,
    Submission,
)

UPDATE_CHECKER_MISSING: bool

class Reddit:
    update_checked: bool = ...
    @property
    def read_only(self) -> bool: ...
    @read_only.setter
    def read_only(self, value: bool) -> None: ...
    def __enter__(self) -> Reddit: ...
    def __exit__(self, *_args: Any) -> None: ...
    config: Config = ...
    auth: Auth = ...
    front: Front = ...
    inbox: Inbox = ...
    live: LiveHelper = ...
    multireddit: MultiredditHelper = ...
    subreddit: SubredditHelper = ...
    subreddits: Subreddits = ...
    user: User = ...
    def __init__(
        self,
        site_name: Optional[str] = ...,
        requestor_class: Optional[Any] = ...,
        requestor_kwargs: Optional[Dict[str, Any]] = ...,
        client_id: Optional[str] = ...,
        client_secret: Optional[str] = ...,
        oauth_url: Optional[str] = ...,
        reddit_url: Optional[str] = ...,
        refresh_token: Optional[str] = ...,
        redirect_uri: Optional[str] = ...,
        password: Optional[str] = ...,
        user_agent: Optional[str] = ...,
        username: Optional[str] = ...,
    ) -> None: ...
    def comment(self, id: Optional[str] = ..., url: Optional[Any] = ...) -> Comment: ...
    def domain(self, domain: str) -> DomainListing: ...
    def get(
        self, path: str, params: Optional[Dict[str, object]] = ...
    ) -> Optional[RedditBase]: ...
    def info(
        self, fullnames: Optional[List[str]] = ..., url: Optional[str] = ...
    ) -> Iterator[Optional[RedditBase]]: ...
    def patch(
        self, path: str, data: Union[Dict[str, object], bytes] = ...
    ) -> Optional[RedditBase]: ...
    def random_subreddit(self, nsfw: bool = ...) -> Subreddit: ...
    def redditor(self, name: str) -> Redditor: ...
    def request(
        self,
        method: Any,
        path: Any,
        params: Optional[Any] = ...,
        data: Optional[Any] = ...,
        files: Optional[Any] = ...,
    ): ...
    def submission(
        self, id: Optional[str] = ..., url: Optional[str] = ...
    ) -> Submission: ...
